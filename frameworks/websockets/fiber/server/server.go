package main

import (
	"encoding/json"
	"log"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
)

// Message - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è
type Message struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

func main() {
	app := fiber.New(fiber.Config{
		Prefork: true, // –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
	})

	// Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ WebSocket upgrade
	app.Use("/ws", func(c *fiber.Ctx) error {
		if websocket.IsWebSocketUpgrade(c) {
			return c.Next()
		}
		return fiber.ErrUpgradeRequired
	})

	// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	app.Get("/ws", websocket.New(func(c *websocket.Conn) {
		log.Println("üîå WebSocket Connected")
		defer func() {
			log.Println("‚ùå Disconnected")
			err := c.Close()
			if err != nil {
				return
			}
		}()

		for {
			// –ß–∏—Ç–∞–µ–º raw-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
			_, msg, err := c.ReadMessage()
			if err != nil {
				log.Println("Read error:", err)
				break
			}

			// –ü–∞—Ä—Å–∏–º JSON
			var received Message
			if err := json.Unmarshal(msg, &received); err != nil {
				log.Println("‚ùå Invalid JSON:", err)
				continue
			}

			log.Printf("üì® Received: %+v\n", received)

			// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
			response := Message{
				Type:    "response",
				Content: "Hello, you said: " + received.Content,
			}

			// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º JSON –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
			respBytes, _ := json.Marshal(response)
			if err := c.WriteMessage(websocket.TextMessage, respBytes); err != nil {
				log.Println("Write error:", err)
				break
			}
		}
	}))

	log.Fatal(app.Listen(":3000"))
}

// {"type": "greeting", "content": "–ü—Ä–∏–≤–µ—Ç!"}
